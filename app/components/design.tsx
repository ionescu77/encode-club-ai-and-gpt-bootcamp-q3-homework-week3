/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/7ipbCxTIZiZ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "./ui/table"
import { Button } from "./ui/button"
import { Input } from "./ui/input"
import { useState, useEffect } from "react";
import { useChat } from "ai/react";
import Markdown from 'react-markdown'

interface Character {
  id: number;
  name: string;
  description: string;
  personality: string;
}

interface Props {
  characters: Character[];
  setCharacters: React.Dispatch<React.SetStateAction<Character[]>>;
}

export default function Design({ characters, setCharacters }: Props) {
  const [editingId, setEditingId] = useState<number | null>(null);
  const [editForm, setEditForm] = useState<Omit<Character, 'id'>>({ name: '', description: '', personality: '' });
  const { messages, append, isLoading } = useChat();
  const [generatedStory, setGeneratedStory] = useState<string | null>(null);
  const { messages: evaluationMessages, append: appendEvaluation } = useChat({ id: 'evaluation' });
  const [showEvaluation, setShowEvaluation] = useState(false);

  const addCharacter = () => {
    if (editForm.name && editForm.description && editForm.personality) {
      setCharacters(prev => [...prev, { ...editForm, id: Date.now() }]);
      setEditForm({ name: '', description: '', personality: '' });
    }
  };

  const deleteCharacter = (id: number) => {
    setCharacters(prev => prev.filter(char => char.id !== id));
  };

  const startEditing = (character: Character) => {
    setEditingId(character.id);
    setEditForm({ name: character.name, description: character.description, personality: character.personality });
  };

  const saveEdit = () => {
    setCharacters(prev => prev.map(char => 
      char.id === editingId ? { ...editForm, id: char.id } : char
    ));
    setEditingId(null);
    setEditForm({ name: '', description: '', personality: '' });
  };

  const evaluateStory = async () => {
    if (!generatedStory) return;
  
    await appendEvaluation({
      role: "user",
      content: `Story: ${generatedStory}\n\nCharacters: ${JSON.stringify(characters)}`
    });
  };

  const generateStory = async () => {
    setShowEvaluation(false);
    await append({
      role: "user",
      content: `Generate a short story (max 500 characters) with: ${characters.map(c => `${c.name} (${c.description}, ${c.personality})`).join(', ')}`
    });
  };

  useEffect(() => {
    if (isLoading) {
      setGeneratedStory(null);
    } else if (messages.length > 0) {
      const response = messages[messages.length - 1].content;
      setGeneratedStory(response);
    }
  }, [isLoading, messages]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gradient-to-b from-[#ADD8E6] to-[#8B00FF]">
      <h1 className="mb-4 text-4xl font-bold text-center text-[#8B00FF]">üåô Magical Story Generator üåü</h1>
      <p className="mb-8 text-lg text-center text-[#8B00FF]">Customize your story by choosing a genre and tone.</p>
      <div className="w-full max-w-4xl p-6 bg-white rounded-lg shadow-lg">
        <Table className="mb-4">
          <TableHeader>
            <TableRow>
              <TableHead className="text-[#8B00FF]">Name</TableHead>
              <TableHead className="text-[#8B00FF]">Description</TableHead>
              <TableHead className="text-[#8B00FF]">Character</TableHead>
              <TableHead className="text-[#8B00FF]">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
          {characters.map(character => (
            <TableRow key={character.id}>
              <TableCell className="px-4 py-2 border-b text-black">
                {editingId === character.id ? 
                  <input 
                    className="w-full text-black border rounded px-2 py-1" 
                    value={editForm.name} 
                    onChange={e => setEditForm({...editForm, name: e.target.value})} 
                  /> : 
                  character.name
                }
              </TableCell>
              <TableCell className="px-4 py-2 border-b text-black">
                {editingId === character.id ? 
                  <input 
                    className="w-full text-black border rounded px-2 py-1" 
                    value={editForm.description} 
                    onChange={e => setEditForm({...editForm, description: e.target.value})} 
                  /> : 
                  character.description
                }
              </TableCell>
              <TableCell className="px-4 py-2 border-b text-black">
                {editingId === character.id ? 
                  <input 
                    className="w-full text-black border rounded px-2 py-1" 
                    value={editForm.personality} 
                    onChange={e => setEditForm({...editForm, personality: e.target.value})} 
                  /> : 
                  character.personality
                }
              </TableCell>
              <TableCell className="px-4 py-2 border-b">
                {editingId === character.id ? (
                  <button onClick={saveEdit} className="bg-green-500 text-white px-2 py-1 rounded mr-2">Save</button>
                ) : (
                  <>
                    <button onClick={() => startEditing(character)} className="bg-blue-500 text-white px-2 py-1 rounded mr-2">Edit</button>
                    <button onClick={() => deleteCharacter(character.id)} className="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
                  </>
                )}
              </TableCell>
            </TableRow>
          ))}
          </TableBody>
        </Table>
        <div className="flex flex-col mb-4 space-y-4 md:flex-row md:space-y-0 md:space-x-4">
          <Input placeholder="Name" className="w-full md:w-1/3 text-black"
            value={editForm.name}
            onChange={e => setEditForm({...editForm, name: e.target.value})} />
          <Input placeholder="Description" className="w-full md:w-1/3 text-black"
            value={editForm.description} 
            onChange={e => setEditForm({...editForm, description: e.target.value})}/>
          <Input placeholder="Character" className="w-full md:w-1/3 text-black" 
            value={editForm.personality} 
            onChange={e => setEditForm({...editForm, personality: e.target.value})}/>
          <Button onClick={addCharacter} className="w-full md:w-auto bg-[#8B00FF] hover:bg-[#6A0DAD] text-white">Add Character üßô‚Äç‚ôÄÔ∏è</Button>
        </div>
        {characters.length === 0 ? (
            <p className="text-red-500">No characters found. Please add a character.</p>
          ) : (
              <Button onClick={generateStory} className="w-full bg-[#8B00FF] hover:bg-[#6A0DAD] text-white">
                    Generate Story ‚ú®
              </Button>
            )
          }
            <div
              hidden={
                  messages.length === 0 ||
              messages[messages.length - 1]?.content.startsWith("Generate")
              }
              className="bg-opacity-50 bg-gray-700 rounded-lg p-4"
            >
              {messages[messages.length - 1]?.content}
              {generatedStory && (
                <Button 
                  onClick={() => {
                    evaluateStory();
                    setShowEvaluation(true);
                  }} 
                  className="mt-4 w-full bg-[#4CAF50] hover:bg-[#45a049] text-white"
                >
                  Evaluate Story üìù
                </Button>
              )}
              {showEvaluation && evaluationMessages.length > 1 && (
                <div className="mt-4 bg-opacity-50 bg-gray-700 rounded-lg p-4">
                  <h3 className="text-xl font-bold mb-2">Story Evaluation:</h3>
                  <Markdown>{evaluationMessages[evaluationMessages.length - 1].content}</Markdown>
                </div>
              )}
            </div>
      </div>
    </div>
  )
}
